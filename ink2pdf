#!/usr/bin/env perl
use strict;
use warnings;

use v5.10.0;
use File::Spec;
use Getopt::Long;
use Pod::Usage;
use XML::LibXML;
use XML::LibXML::XPathContext;

# Inits
#<<<
my $opts = {};
GetOptions($opts,
    "background|b:s",
    "debug|d", # don't document may go away
    "help|h",
    "insert|i:s@",
    "inkbinary|I:s",
    "keep|k",
    "list-layers|l",
    "show-mapping|m",
    "output|o:s",
    "quiet|q",
    "tags|t:s",
    "verbose|v",
    "prefixes|x",
    ) or pod2usage(-verbose => 0,
                   -exitval => 22,  # 22 = EINVAL Invalid argument
                   -message => "*** Invalid option or bad syntax");
#>>>
pod2usage(
    -verbose => 2,
    -exitval => 0
) if $opts->{help};
pod2usage(
    -verbose => 0,
    -exitval => 2,                                    # 2 = ENOENT NO such file
    -message => "*** Missing Inkscape SVG filename"
) if !@ARGV && !$opts->{debug};
my $SVGFILE     = $ARGV[0];
my $BGLAYER     = $opts->{background} || q{};
my $KEEP        = $opts->{keep};
my $INSERT      = $opts->{insert} || [];
my $INKBIN      = $opts->{'inkbinary'} || "inkscape";
my $LISTLAYERS  = $opts->{'list-layers'};
my $SHOWMAPPING = $opts->{'show-mapping'};
my @CTAGS       = split(',', $opts->{tags} || q{});
my $VERBOSE
    = $opts->{verbose} ? 2
    : $opts->{quiet}   ? 0
    :                    1;
my $XMODE = $opts->{prefixes};
die "*** Conditional tags may only be used with --prefixes (-x)\n"
    if @CTAGS && !$XMODE;

# Verbosity should affect inkscape stderr, too
my $inkscape_stderr = $VERBOSE == 2 ? "" : "2>/dev/null";

# Option for PDF output was changed in 1.x
my $inkscape_version = `$INKBIN --version $inkscape_stderr`;
$inkscape_version =~ m/(\d+)\.(\d+)(\.(\d+))?/smg
    or die "*** Cannot determine inkscape version at '$INKBIN' from string '$inkscape_version'\n";
my $inkscape_options = $1 == 0 ? "-z -A " : "--export-filename=";
print "Using inkscape binary '$INKBIN'\n" if $VERBOSE == 2;
print "Detected inkscape version $inkscape_version\n" if $VERBOSE == 2;
exit 0 if $opts->{debug};


# Load file
my $xml   = XML::LibXML->load_xml(location => $SVGFILE);
my $xpath = XML::LibXML::XPathContext->new($xml);
$xpath->registerNs("defNs", 'http://www.w3.org/2000/svg');

# Create related file names
my (undef, undef, $base) = File::Spec->splitpath($SVGFILE);
$base =~ s{\.svg$}{}i;
my $outfile = $opts->{output} || "$base.pdf";

# Get layer names
my @LAYERS = get_layers($xpath);
die "*** No layers in file $SVGFILE\n" unless @LAYERS;
if ($LISTLAYERS) {
    print map {"$_\n"} @LAYERS;
    exit 0;
}
if ($BGLAYER) {
    unless (grep {$_ eq $BGLAYER} @LAYERS) {
        warn "--- No such background layer: '$BGLAYER'\n";
        $BGLAYER = q{};
    }
}

# Generate the PDF's
$XMODE
    ? do_by_prefix()
    : do_all_layers();

exit 0;

#
#                           ------- o -------
#

# Check if there's an intersection between two lists of strings
sub any_match {
    my @a = ref $_[0] ? @{$_[0]} : split(/,/, $_[0]);
    my @b = ref $_[1] ? @{$_[1]} : split(/,/, $_[1]);
    foreach my $a (@a) {
        next unless defined $a && $a ne q{};
        foreach my $b (@b) {
            next unless defined $b && $b ne q{};
            return 1 if lc($a) eq lc($b);
        }
    }
    return 0;
}

# Do all layers: Simply map each layer to a page (with a b/g option)
sub do_all_layers {

    # Create layer set
    my @lset = ();
    foreach my $layer (@LAYERS) {
        next if $layer eq $BGLAYER;
        push @lset, [$layer, $BGLAYER || ()];
    }
    return show_page_mapping(@lset) if $SHOWMAPPING;

    # Generate the output
    generate_all(@lset);
}

# Create pages as indicated by layer prefixes
sub do_by_prefix {

    # Find all prefixes
    my $seq_re   = qr{ \* | L | R | [0-9\.\-]+ }ix;
    my $tag_re   = qr{ [a-z0-9\-]+ }ix;
    my @prefixen = ();
    use constant PST_CHR => 0;
    use constant PST_SEQ => 1;
    use constant PST_TAG => 2;
    use constant PST_NAM => 3;
    say "Discovered Prefixen:" if $VERBOSE >= 2;

    foreach my $layer (@LAYERS) {
        next unless $layer =~ m{^\s* ([pbc])                                # Start char
                                     ($seq_re (?: \, $seq_re)* )?           # Seqnums
                                     (?: \( ($tag_re (?: \, $tag_re)* ) )?  # Optional tags
                                         \)                                 # Required closing paren
                               }ix;
        my $pset = [lc $1, lc($2 || q{}), lc($3 || q{}), $layer];    # pbc, seq, ctag, layername
        push @prefixen, $pset;
        say "  type: $pset->[PST_CHR]  seqs: "
            . ($pset->[PST_SEQ] || q{--})
            . "\ttags: "
            . ($pset->[PST_TAG] || q{--})
            . "\tlayer: '$pset->[PST_NAM]'"
            if $VERBOSE >= 2;
    }
    say "" if $VERBOSE >= 2;
    die "*** No layer prefixes discovered -- output would be empty (don't use -x?)\n"
        unless @prefixen;

    # If conditional tags given, toss out layers that don't match
    if (@CTAGS) {
        @prefixen = grep {!$_->[PST_TAG] || any_match(\@CTAGS, $_->[PST_TAG])} @prefixen;
    }

    # Get content sequence numbers
    my %cseqs = ();
    foreach my $x (@prefixen) {
        next if $x->[0] eq 'b';    # skip forced background layers
        my $seq = $x->[1];
        next unless $seq;                       # skip blank
        next unless $seq =~ m{^[0-9\.\,]+$};    # can't be a b/g layer (no dash, no *, ...)
        foreach my $sq (split(/,/, $seq)) {
            if ($sq !~ m{^\d+(\.\d*)?$}) {
                warn "--- Skip bad sequence number '$sq' in layer name '$x->[3]'\n";
                next;
            }
            $cseqs{$sq}++;
        }
    }
    my @cseq = sort {$a <=> $b} keys %cseqs;    # Sorted numerically

    # Build layer-sets list
    my @l2p  = ();
    my $pnum = 1;
    for my $sq (@cseq) {

        # Find all layers that match
        my $any = 0;
        foreach my $x (@prefixen) {
            if (seq_match($sq, $x->[1], $pnum)) {    # TODO: ctag match
                my $lname = $x->[3];
                if ($any) {

                    # Add to current page
                    push @{$l2p[-1]}, $lname;
                }
                else {
                    # Start new page
                    push @l2p, [$lname];
                    $any = 1;
                }
            }
        }
        ++$pnum if $any;
    }
    die "*** No content in output\n" unless @l2p;
    return show_page_mapping(@l2p) if $SHOWMAPPING;

    # Generate output
    generate_all(@l2p);
}

# Generate all output
sub generate_all {
    my @l2p = @_;

    say "Page Generation..." if $VERBOSE >= 1;
    my $pnum      = 0;
    my @pdf_files = ();
    foreach my $lset (@l2p) {
        ++$pnum;

        # Create temp SVG with desired layers set
        my $tmpfile = sprintf("$base-%3.3d.svg", $pnum);
        say "  Temp SVG $tmpfile" if $VERBOSE >= 2;
        my $n = set_layers_visible($xpath, @$lset);
        warn "\n--- No matching layers for:\n" . (map {"\t$_\n"} @$lset) unless $n;
        $xml->toFile($tmpfile);

        # PDF generation
        my $pdffile = sprintf("$base-%3.3d.pdf", $pnum);
        push @pdf_files, $pdffile;
        generate_pdf($tmpfile, $pdffile);
        say "   --> PDF $pdffile generated" if $VERBOSE >= 2;

        # Cleanup
        unlink $tmpfile;
        print " $pnum" if $VERBOSE == 1;
    }

    # Unify PDF's
    if ($KEEP) {
        say " K" if $VERBOSE == 1;
        say "Individual PDF files will be kept (-k)" if $VERBOSE >= 2;
    }
    else {
        say " U" if $VERBOSE == 1;
        say "Unifying pages" if $VERBOSE >= 2;
        my @my_pdf_files = @pdf_files;    # So we don't delete the inserted files

        # Inserted pages
        foreach my $ins (@$INSERT) {
            my ($atpage, $file) = split(/:/, $ins, 2);
            if ($atpage =~ m{^end$}i) {
                $atpage = @pdf_files + 1;
            }
            elsif ($atpage !~ m{^\d+$}) {
                warn "--- Insertion skipped; Invalid page number: $ins\n";
                next;
            }
            if ($atpage < 1) {
                warn "--- Insertion page before first page; will change to first page: $ins\n";
                $atpage = 1;
            }
            elsif ($atpage > @pdf_files + 1) {
                warn "--- Insertion page after end; will change to last page: $ins\n";
                $atpage = @pdf_files + 1;
            }
            say "Insert '$file' at page $atpage" if $VERBOSE >= 1;
            splice @pdf_files, $atpage - 1, 0, $file;
        }

        # ... unify ...
        my $cmd = "pdfunite " . join(" ", map {"'$_'"} @pdf_files) . " '" . $outfile . "'";
        if (system($cmd) != 0) {
            unlink @my_pdf_files;
            die "*** pdfunite command failure: $!\n  * Command used: $cmd\n";
        }

        say "Cleanup" if $VERBOSE >= 2;
        unlink @my_pdf_files;
        say "Created $outfile" if $VERBOSE >= 1;
    }
}

# Create a one-page PDF
sub generate_pdf {
    my $inkfile = shift;
    my $outfile = shift;
    my $cmd     = "$INKBIN $inkscape_options'$outfile' '$inkfile' $inkscape_stderr";
    system($cmd) == 0
        or die "*** inkscape command failure: $!\n  * Command used: $cmd";
}

# Get layer names (technically, called "labels")
sub get_layers {
    my $xpath  = shift;
    my @labels = ();
    foreach my $layer ($xpath->findnodes('/defNs:svg/defNs:g[@inkscape:groupmode="layer"]')) {
        my $label = $layer->{'inkscape:label'};
        push @labels, $label;
    }
    return @labels;
}

# Does a given sequence match a sequence spec?
sub seq_match {
    my $want = shift;
    my $spec = shift;
    my $pnum = shift;

    foreach my $part (split(/,/, $spec)) {
        return 1 if $part eq '*';
        return 1 if ($part eq 'l') && ($pnum % 2) && ($pnum != 1);    # Left-side doesn't include p1
        return 1 if ($part eq 'r') && !($pnum % 2);
        return 1 if $part eq $want;
        if ($part =~ m{-}) {
            my ($m, $n) = split(/-/, $part, 2);
            next if ($m eq '') && ($n eq '');      # We got just a dash without either side
            next if ($m ne '') && ($want < $m);    # numerical compare
            next if ($n ne '') && ($want > $n);    # numerical compare
            return 1;
        }
    }
    return 0;
}

# Set the given layers visible, hide the others
sub set_layers_visible {
    my $xpath = shift;
    my @toset = @_;

    my $numset = 0;
LAYER:
    foreach my $layer ($xpath->findnodes('/defNs:svg/defNs:g[@inkscape:groupmode="layer"]')) {
        my $label = $layer->{'inkscape:label'};
        foreach my $wantlabel (@toset) {
            if ($label eq $wantlabel) {
                $layer->{'style'} ||= "display:inline"; # Some versions omit this        
                $layer->{'style'} =~ s{\bdisplay:none\b}{display:inline};
                ++$numset;
                next LAYER;
            }
        }
        $layer->{'style'} ||= "display:inline"; # Some versions omit this        
        $layer->{'style'} =~ s{\bdisplay:inline\b}{display:none};
    }
    return $numset;
}

# Show the layer-to-page mapping grid
sub show_page_mapping {
    my @lsets = @_;    # Sets of layers in page order: ([lb,l1], [lb,l2,l5], [l3,lb], ...)

    # Print heading
    my $pmax = scalar(@lsets);
    if ($pmax > 99) {
        print " " x 40;
        for my $p (1 .. $pmax) {
            print(int($p / 100) || ".");
        }
        print "\n";
    }
    if ($pmax > 9) {
        print " " x 40;
        for my $p (1 .. $pmax) {
            print((int($p / 10) % 10) || ".");
        }
        print "\n";
    }
    print "Layer Name                Page # -->  ";
    for my $p (1 .. $pmax) {
        print $p % 10;
    }
    print "\n";
    say "==================================== +" . ('=' x $pmax) . "+";

    # Show mapping for ALL layers even those not in the layer set
    my $pnum = 0;
    foreach my $lname (@LAYERS) {
        my $l36
            = length($lname) <= 36
            ? $lname
            : substr($lname, 0, 35) . '…';
        printf("%-36s |", $l36);
        for my $p (1 .. $pmax) {
            my @lset = @{$lsets[$p - 1]};
            print((grep {$lname eq $_} @lset) ? '*' : '.');
        }
        print "|\n";
    }
    say "==================================== +" . ('=' x $pmax) . "+";
}

__END__

=head1 NAME

ink2pdf - Inkscape to Multi-Page PDF Document

=head1 SYNOPSIS

 ink2pdf [options] inkscape-file

 Options:
  -b  --background L   Use layer L as a backround layer (can't use with -x).
  -h  --help           Usage summary.
  -i  --insert N:file  Insert existing PDF file into document at page N.
                         May use multiple times.  N starts at 1.
                         1 will insert the PDF file be at the beginning.
                         Use "end" to insert at the end of the document.
                         Ignored when using -k.
  -I  --inkbinary BIN  Use BIN for the inkscape binary (the program).
                         For example, /usr/local/bin/inkscape or
                         /snap/bin/inkscape.  Default is to look for
                         'inkscape' in the current $PATH envvar.
  -k  --keep           Don't unite the pages into one PDF; keep each page 
                         as it's own numbered .pdf file.
  -l  --list-layers    Show layer names and exit.
  -m  --show-mapping   Show layer-to-page mapping and exit.
  -o  --output PDFFILE Specify the output PDF file name; default is to 
                         replace the ".svg" suffix of the input file name 
                         with ".pdf"; if no ".svg" suffix then ".pdf" is 
                         appended.
  -q  --quiet          No output except warnings and errors.
  -t  --tags TAGS      Conditional tags in effect; delimit tags with commas.
                         Tags only processed when using prefixes; thus
                         you must use -x too when using -t. 
  -x  --prefixes       Parse prefixes in layer names.
  -v  --verbose        Verbose mode.  Overrides -q.

=head1 DESCRIPTION

Generates a multi-page PDF document from your Inkscape document.
By default each layer becomes a page; use "page prefixes" in your
Inkscape document and the --prefixes (-x) option for better control.

=cut
